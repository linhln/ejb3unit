package com.bm.ejb3metadata.annotations.analyzer;

import org.hibernate.repackage.cglib.asm.AnnotationVisitor;
import org.hibernate.repackage.cglib.asm.MethodVisitor;

import com.bm.ejb3metadata.annotations.JMethod;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxAnnotationPostConstructVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxAnnotationPreDestroyVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxEjbInitVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxEjbPostActivateVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxEjbPrePassivateVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxEjbRemoveVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxEjbTimeoutVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxInterceptorAroundInvokeVisitor;
import com.bm.ejb3metadata.annotations.analyzer.method.JavaxInterceptorExcludeClassInterceptorsVisitor;
import com.bm.ejb3metadata.annotations.metadata.ClassAnnotationMetadata;
import com.bm.ejb3metadata.annotations.metadata.MethodAnnotationMetadata;

/**
 * This classes analyses a given method and build/fill meta data information.
 * 
 * @author Daniel Wiese
 */
public class ScanMethodVisitor extends
		ScanCommonVisitor<MethodAnnotationMetadata> implements MethodVisitor {

	/**
	 * Class generated by the visitor which correspond to meta data contained in
	 * the parsed method.
	 */
	private MethodAnnotationMetadata methodAnnotationMetadata = null;

	/**
	 * Parent of method annotation meta data that are built by this visitor.
	 */
	private ClassAnnotationMetadata classAnnotationMetadata = null;

	/**
	 * Constructor.
	 * 
	 * @param jMethod
	 *            Method object on which we set meta data.
	 * @param classAnnotationMetadata
	 *            the parent object on which add generated meta-data.
	 */
	public ScanMethodVisitor(final JMethod jMethod,
			final ClassAnnotationMetadata classAnnotationMetadata) {

		// object build and to fill
		this.methodAnnotationMetadata = new MethodAnnotationMetadata(jMethod,
				classAnnotationMetadata);

		// parent
		this.classAnnotationMetadata = classAnnotationMetadata;

		initVisitors();
	}

	/**
	 * Build visitors used by this one.
	 */
	private void initVisitors() {
		super.initVisitors(methodAnnotationMetadata);

		// add @Init
		getAnnotationVisitors().put(JavaxEjbInitVisitor.TYPE,
				new JavaxEjbInitVisitor(methodAnnotationMetadata));

		// add @Remove
		getAnnotationVisitors().put(JavaxEjbRemoveVisitor.TYPE,
				new JavaxEjbRemoveVisitor(methodAnnotationMetadata));

		// add @TransactionAttribute
		getAnnotationVisitors()
				.put(
						JavaxEjbTransactionAttributeVisitor.TYPE,
						new JavaxEjbTransactionAttributeVisitor<MethodAnnotationMetadata>(
								methodAnnotationMetadata));

		// add @PostConstruct
		getAnnotationVisitors().put(
				JavaxAnnotationPostConstructVisitor.TYPE,
				new JavaxAnnotationPostConstructVisitor(
						methodAnnotationMetadata));
		// add @PreDestroy
		getAnnotationVisitors().put(JavaxAnnotationPreDestroyVisitor.TYPE,
				new JavaxAnnotationPreDestroyVisitor(methodAnnotationMetadata));
		// add @PostActivate
		getAnnotationVisitors().put(JavaxEjbPostActivateVisitor.TYPE,
				new JavaxEjbPostActivateVisitor(methodAnnotationMetadata));
		// add @PrePassivate
		getAnnotationVisitors().put(JavaxEjbPrePassivateVisitor.TYPE,
				new JavaxEjbPrePassivateVisitor(methodAnnotationMetadata));

		// add @Timeout
		getAnnotationVisitors().put(JavaxEjbTimeoutVisitor.TYPE,
				new JavaxEjbTimeoutVisitor(methodAnnotationMetadata));

		// add @AroundInvoke
		getAnnotationVisitors().put(
				JavaxInterceptorAroundInvokeVisitor.TYPE,
				new JavaxInterceptorAroundInvokeVisitor(
						methodAnnotationMetadata));

		// add @Interceptors
		getAnnotationVisitors()
				.put(
						JavaxInterceptorInterceptorsVisitor.TYPE,
						new JavaxInterceptorInterceptorsVisitor<MethodAnnotationMetadata>(
								methodAnnotationMetadata));

		// add @ExcludeClassInterceptors
		getAnnotationVisitors().put(
				JavaxInterceptorExcludeClassInterceptorsVisitor.TYPE,
				new JavaxInterceptorExcludeClassInterceptorsVisitor(
						methodAnnotationMetadata));

	}

	/**
	 * Visits the default value of this annotation interface method (ignore it).
	 * 
	 * @return a non null visitor to the visit the actual default value of this
	 *         annotation interface method. The 'name' parameters passed to the
	 *         methods of this annotation visitor are ignored. Moreover, exacly
	 *         one visit method must be called on this annotation visitor,
	 *         followed by visitEnd.
	 */
	@Override
	public AnnotationVisitor visitAnnotationDefault() {
		return getEmptyVisitor();
	}

	/**
	 * Visits an annotation of a parameter this method (ignore it).
	 * 
	 * @param parameter
	 *            the parameter index.
	 * @param desc
	 *            the class descriptor of the annotation class.
	 * @param visible
	 *            <tt>true</tt> if the annotation is visible at runtime.
	 * @return a non null visitor to visit the annotation values.
	 */
	@Override
	public AnnotationVisitor visitParameterAnnotation(final int parameter,
			final String desc, final boolean visible) {
		return getEmptyVisitor();
	}

	/**
	 * Visits the end of the method. This method, which is the last one to be
	 * called, is used to inform the visitor that all the annotations and
	 * attributes of the method have been visited.
	 */
	@Override
	public void visitEnd() {
		classAnnotationMetadata
				.addMethodAnnotationMetadata(methodAnnotationMetadata);
	}

}
