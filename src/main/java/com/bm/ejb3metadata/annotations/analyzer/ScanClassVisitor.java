package com.bm.ejb3metadata.annotations.analyzer;

import org.hibernate.repackage.cglib.asm.ClassVisitor;
import org.hibernate.repackage.cglib.asm.FieldVisitor;
import org.hibernate.repackage.cglib.asm.MethodVisitor;

import com.bm.ejb3metadata.annotations.JField;
import com.bm.ejb3metadata.annotations.JMethod;
import com.bm.ejb3metadata.annotations.analyzer.classes.JBossEjbServiceVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxAnnotationResourcesVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbApplicationExceptionVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbEJBsVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbLocalHomeVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbLocalVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbMessageDrivenVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbRemoteHomeVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbRemoteVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbStatefulVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbStatelessVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxEjbTransactionManagementVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxPersistencePersistenceContextsVisitor;
import com.bm.ejb3metadata.annotations.analyzer.classes.JavaxPersistencePersistenceUnitsVisitor;
import com.bm.ejb3metadata.annotations.metadata.ClassAnnotationMetadata;
import com.bm.ejb3metadata.annotations.metadata.EjbJarAnnotationMetadata;

/**
 * This classes analyses a given class and build/fill meta data information.
 * 
 * @author Daniel Wiese
 */
public class ScanClassVisitor extends
		ScanCommonVisitor<ClassAnnotationMetadata> implements ClassVisitor {

	/**
	 * Class generated by the visitor which correspond to meta data contained
	 * in. the parsed class
	 */
	private ClassAnnotationMetadata classAnnotationMetadata = null;

	/**
	 * Parent of classannotation meta data that are built by this visitor.
	 */
	private EjbJarAnnotationMetadata ejbJarAnnotationMetadata = null;

	/**
	 * Constructor.
	 * 
	 * @param ejbJarAnnotationMetadata
	 *            the parent object on which add generated meta-data
	 */
	public ScanClassVisitor(
			final EjbJarAnnotationMetadata ejbJarAnnotationMetadata) {
		this.ejbJarAnnotationMetadata = ejbJarAnnotationMetadata;
	}

	/**
	 * Build the meta-data class with the given name (given by asm).
	 * 
	 * @param className
	 *            name of the class that is visited
	 * @param superName
	 *            the internal of name of the super class (see
	 *            {@link org.ejb3unit.asm.Type#getInternalName() getInternalName}).
	 *            For interfaces, the super class is {@link Object}. May be
	 *            <tt>null</tt>, but only for the {@link Object} class.
	 * @param interfaces
	 *            the internal names of the class's interfaces (see
	 *            {@link org.ejb3unit.asm.Type#getInternalName() getInternalName}).
	 *            May be <tt>null</tt>.
	 */
	private void init(final String className, final String superName,
			final String[] interfaces) {
		classAnnotationMetadata = new ClassAnnotationMetadata(className,
				ejbJarAnnotationMetadata);
		classAnnotationMetadata.setSuperName(superName);
		classAnnotationMetadata.setInterfaces(interfaces);
		initVisitors();
	}

	/**
	 * Build visitors used by this one.
	 */
	protected void initVisitors() {
		super.initVisitors(classAnnotationMetadata);
		// add @Local
		getAnnotationVisitors().put(JavaxEjbLocalVisitor.TYPE,
				new JavaxEjbLocalVisitor(classAnnotationMetadata));

		// add @Remote
		getAnnotationVisitors().put(JavaxEjbRemoteVisitor.TYPE,
				new JavaxEjbRemoteVisitor(classAnnotationMetadata));

		// add @Stateless
		getAnnotationVisitors().put(JavaxEjbStatelessVisitor.TYPE,
				new JavaxEjbStatelessVisitor(classAnnotationMetadata));

		// add @Stateful
		getAnnotationVisitors().put(JavaxEjbStatefulVisitor.TYPE,
				new JavaxEjbStatefulVisitor(classAnnotationMetadata));

		// add @Service
		getAnnotationVisitors().put(JBossEjbServiceVisitor.TYPE,
				new JBossEjbServiceVisitor(classAnnotationMetadata));

		// add @MessageDriven
		getAnnotationVisitors().put(JavaxEjbMessageDrivenVisitor.TYPE,
				new JavaxEjbMessageDrivenVisitor(classAnnotationMetadata));

		// add @LocalHome
		getAnnotationVisitors().put(JavaxEjbLocalHomeVisitor.TYPE,
				new JavaxEjbLocalHomeVisitor(classAnnotationMetadata));

		// add @RemoteHome
		getAnnotationVisitors().put(JavaxEjbRemoteHomeVisitor.TYPE,
				new JavaxEjbRemoteHomeVisitor(classAnnotationMetadata));

		// add @TransactionManagement
		getAnnotationVisitors().put(
				JavaxEjbTransactionManagementVisitor.TYPE,
				new JavaxEjbTransactionManagementVisitor(
						classAnnotationMetadata));

		// add @TransactionAttribute
		getAnnotationVisitors()
				.put(
						JavaxEjbTransactionAttributeVisitor.TYPE,
						new JavaxEjbTransactionAttributeVisitor<ClassAnnotationMetadata>(
								classAnnotationMetadata));

		// add @Interceptors
		getAnnotationVisitors()
				.put(
						JavaxInterceptorInterceptorsVisitor.TYPE,
						new JavaxInterceptorInterceptorsVisitor<ClassAnnotationMetadata>(
								classAnnotationMetadata));

		// add @ApplicationException
		getAnnotationVisitors()
				.put(
						JavaxEjbApplicationExceptionVisitor.TYPE,
						new JavaxEjbApplicationExceptionVisitor(
								classAnnotationMetadata));

		// add @EJBs
		getAnnotationVisitors().put(JavaxEjbEJBsVisitor.TYPE,
				new JavaxEjbEJBsVisitor(classAnnotationMetadata));

		// add @Resources
		getAnnotationVisitors().put(JavaxAnnotationResourcesVisitor.TYPE,
				new JavaxAnnotationResourcesVisitor(classAnnotationMetadata));

		// add @PersistenceContexts
		getAnnotationVisitors().put(
				JavaxPersistencePersistenceContextsVisitor.TYPE,
				new JavaxPersistencePersistenceContextsVisitor(
						classAnnotationMetadata));

		// add @PersistenceUnits
		getAnnotationVisitors().put(
				JavaxPersistencePersistenceUnitsVisitor.TYPE,
				new JavaxPersistencePersistenceUnitsVisitor(
						classAnnotationMetadata));

	}

	/**
	 * Visits the header of the class.
	 * 
	 * @param version
	 *            the class version.
	 * @param access
	 *            the class's access flags (see {@link org.ejb3unit.asm.Opcodes}).
	 *            This parameter also indicates if the class is deprecated.
	 * @param name
	 *            the internal name of the class (see
	 *            {@link org.ejb3unit.asm.Type#getInternalName() getInternalName}).
	 * @param signature
	 *            the signature of this class. May be <tt>null</tt> if the
	 *            class is not a generic one, and does not extend or implement
	 *            generic classes or interfaces.
	 * @param superName
	 *            the internal of name of the super class (see
	 *            {@link org.ejb3unit.asm.Type#getInternalName() getInternalName}).
	 *            For interfaces, the super class is {@link Object}. May be
	 *            <tt>null</tt>, but only for the {@link Object} class.
	 * @param interfaces
	 *            the internal names of the class's interfaces (see
	 *            {@link org.ejb3unit.asm.Type#getInternalName() getInternalName}).
	 *            May be <tt>null</tt>.
	 */
	@Override
	public void visit(final int version, final int access, final String name,
			final String signature, final String superName,
			final String[] interfaces) {
		init(name, superName, interfaces);
	}

	/**
	 * Visits a method of the class. This method <i>must</i> return a new
	 * {@link org.ejb3unit.asm.MethodVisitor} instance (or <tt>null</tt>)
	 * each time it is called, i.e., it should not return a previously returned
	 * visitor.
	 * 
	 * @param access
	 *            the method's access flags (see
	 *            {@link org.ejb3unit.asm.Opcodes}). This parameter also
	 *            indicates if the method is synthetic and/or deprecated.
	 * @param name
	 *            the method's name.
	 * @param desc
	 *            the method's descriptor (see {@link org.ejb3unit.asm.Type}).
	 * @param signature
	 *            the method's signature. May be <tt>null</tt> if the method
	 *            parameters, return type and exceptions do not use generic
	 *            types.
	 * @param exceptions
	 *            the internal names of the method's exception classes (see
	 *            {@link org.ejb3unit.asm.Type#getInternalName() getInternalName}).
	 *            May be <tt>null</tt>.
	 * @return an object to visit the byte code of the method, or <tt>null</tt>
	 *         if this class visitor is not interested in visiting the code of
	 *         this method.
	 */
	@Override
	public MethodVisitor visitMethod(final int access, final String name,
			final String desc, final String signature, final String[] exceptions) {
		JMethod jMethod = new JMethod(access, name, desc, signature, exceptions);
		return new ScanMethodVisitor(jMethod, classAnnotationMetadata);
	}

	/**
	 * Visits the end of the class. This method, which is the last one to be
	 * called, is used to inform the visitor that all the fields and methods of
	 * the class have been visited.
	 */
	@Override
	public void visitEnd() {
		ejbJarAnnotationMetadata
				.addClassAnnotationMetadata(classAnnotationMetadata);
	}

	/**
	 * Visits a field of the class.
	 * 
	 * @param access
	 *            the field's access flags (see {@link org.ejb3unit.asm.Opcodes}).
	 *            This parameter also indicates if the field is synthetic and/or
	 *            deprecated.
	 * @param name
	 *            the field's name.
	 * @param desc
	 *            the field's descriptor (see {@link org.ejb3unit.asm.Type}).
	 * @param signature
	 *            the field's signature. May be <tt>null</tt> if the field's
	 *            type does not use generic types.
	 * @param value
	 *            the field's initial value. This parameter, which may be
	 *            <tt>null</tt> if the field does not have an initial value,
	 *            must be an {@link Integer}, a {@link Float}, a {@link Long},
	 *            a {@link Double} or a {@link String} (for <tt>int</tt>,
	 *            <tt>float</tt>, <tt>long</tt> or <tt>String</tt> fields
	 *            respectively). <i>This parameter is only used for static
	 *            fields</i>. Its value is ignored for non static fields, which
	 *            must be initialized through bytecode instructions in
	 *            constructors or methods.
	 * @return a visitor to visit field annotations and attributes, or
	 *         <tt>null</tt> if this class visitor is not interested in
	 *         visiting these annotations and attributes.
	 */
	@Override
	public FieldVisitor visitField(final int access, final String name,
			final String desc, final String signature, final Object value) {
		JField jField = new JField(access, name, desc, signature, value);
		return new ScanFieldVisitor(jField, classAnnotationMetadata);
	}
}
